extends ../layout

block content
  h1.mb-4 Nuestros Productos
  
  .container
    .d-flex.justify-content-end.mb-3
      if user && user.isAdmin
        .d-flex.align-items-center.gap-2
          a.btn.btn-primary(href="/products/new" style="width: 180px; white-space: nowrap;") Agregar Producto
          a.btn.btn-secondary(href='/products/categories' style="width: 180px; white-space: nowrap;") Gestionar CategorÃ­as

    form#filterForm.mb-4(method="GET" action="/products")
      .row.g-2
        .col-md-3
          .dropdown
            button#categoryDropdown.btn.dropdown-toggle.w-100(type="button" data-bs-toggle="dropdown" aria-expanded="false")
              | CategorÃ­as
            ul.dropdown-menu.w-100(aria-labelledby="categoryDropdown" style="padding: 10px;")
              li
                .form-check
                  input#allCategories.form-check-input(type="checkbox" value="all" name="category[]" checked=!currentCategory || currentCategory.length === 0)
                  label.form-check-label(for="allCategories") Todas las categorÃ­as
              each category in categories
                li
                  .form-check
                    input.form-check-input.category-checkbox(type="checkbox" value=category name="category[]" id=category checked=currentCategory && currentCategory.includes(category))
                    label.form-check-label(for=category)= category
        .col-md-3
          select.form-select(name="sortBy")
            option(value="") Sin ordenar
            option(value="price_asc", selected=currentSort === 'price_asc') Precio: Menor a Mayor
            option(value="price_desc", selected=currentSort === 'price_desc') Precio: Mayor a Menor
        .col-md-3
          .input-group
            input.form-control(type="text" name="keyword" placeholder="Buscar..." value=currentKeyword)
            button.btn.btn-outline-secondary.btn-filter(type="submit") Buscar
        .col-md-3
          .d-flex.gap-2
            button.btn.btn-primary.flex-grow-1.btn-filter(type="submit") Aplicar filtros
            button#resetFilters.btn.btn-secondary.flex-grow-1(type="button") Resetear filtros
    .row.row-cols-1.row-cols-md-3.g-4
      each product in products
        .col
          .card.h-100
            .card-body
              h5.card-title= product.name
              p.card-text.text-muted $#{product.price}
              p.card-text.text-muted CategorÃ­a: #{product.category}
              a.btn.btn-primary.btn-sm(href=`/products/${product.id}`) Ver detalles
              if user && user.isAdmin
                a.btn.btn-warning.btn-sm.ms-2(href=`/products/${product.id}/edit`) Editar
                button.btn.btn-danger.btn-sm.ms-2.delete-product-btn(data-product-id=product.id) Eliminar
              else if user
                button.btn.btn-success.btn-sm.ms-2.add-to-cart-btn(data-product-id=product.id, data-product-name=product.name, data-product-price=product.price) Agregar al carrito


  #cartModal.modal.fade(tabindex='-1', aria-labelledby='cartModalLabel', aria-hidden='true')
    .modal-dialog
      .modal-content
        .modal-header
          h5#cartModalLabel.modal-title Carrito de Compras
          button.btn-close(type='button', data-bs-dismiss='modal', aria-label='Close')
        .modal-body
          #cartItems
        .modal-footer
          button#payButton.btn.btn-primary(type='button') Pagar
          button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cerrar

  if user && !user.isAdmin
    button#cartButton(type='button', data-bs-toggle='modal', data-bs-target='#cartModal')
      | ðŸ›’
      span#cartItemCount 0

  script.
    document.querySelectorAll('.delete-product-btn').forEach(button => {
      button.addEventListener('click', async (e) => {
        const productId = e.target.getAttribute('data-product-id');
        if (confirm('Â¿EstÃ¡s seguro de que quieres eliminar este producto?')) {
          try {
            const response = await fetch(`/api/product/${productId}`, {
              method: 'DELETE',
            });
            if (response.ok) {
              e.target.closest('.col').remove();
              alert('Producto eliminado exitosamente');
            } else {
              alert('Error al eliminar el producto');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error al eliminar el producto');
          }
        }
      });
    });

    let cart = [];

    function updateCartItemCount() {
      const count = cart.reduce((total, item) => total + item.quantity, 0);
      document.getElementById('cartItemCount').textContent = count;
    }

    function updateCartModal() {
      const cartItems = document.getElementById('cartItems');
      cartItems.innerHTML = '';
      let total = 0;

      cart.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.innerHTML = `${item.name} - $${item.price} x ${item.quantity}`;
        cartItems.appendChild(itemElement);
        total += item.price * item.quantity;
      });

      const totalElement = document.createElement('div');
      totalElement.innerHTML = `<strong>Total: $${total.toFixed(2)}</strong>`;
      cartItems.appendChild(totalElement);
    }

    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const productId = e.target.getAttribute('data-product-id');
        const productName = e.target.getAttribute('data-product-name');
        const productPrice = parseFloat(e.target.getAttribute('data-product-price'));

        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
          existingItem.quantity += 1;
        } else {
          cart.push({ id: productId, name: productName, price: productPrice, quantity: 1 });
        }

        updateCartItemCount();
        updateCartModal();
      });
    });

    document.getElementById('payButton').addEventListener('click', async () => {
      try {
        const response = await fetch('/api/order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ items: cart })
        });

        if (response.ok) {
          alert('Pago realizado con Ã©xito. Orden generada.');
          cart = [];
          updateCartItemCount();
          updateCartModal();
          bootstrap.Modal.getInstance(document.getElementById('cartModal')).hide();
        } else {
          alert('Error al procesar el pago.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al procesar el pago.');
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      new bootstrap.Modal(document.getElementById('cartModal'));
      updateCartItemCount();
      updateCartModal();
    });

    document.getElementById('filterForm').addEventListener('submit', function(e) {
      e.preventDefault();
      this.submit(); 
    });

  script.
    document.addEventListener('DOMContentLoaded', function() {
      const allCheckbox = document.getElementById('allCategories');
      const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
      const categoryDropdown = document.getElementById('categoryDropdown');
      const resetButton = document.getElementById('resetFilters');
      const sortBySelect = document.querySelector('select[name="sortBy"]');
      const keywordInput = document.querySelector('input[name="keyword"]');

      allCheckbox.addEventListener('change', function() {
        categoryCheckboxes.forEach(checkbox => {
          checkbox.checked = allCheckbox.checked;
        });
        updateDropdownText();
      });

      categoryCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          if (!this.checked) {
            allCheckbox.checked = false;
          } else {
            allCheckbox.checked = Array.from(categoryCheckboxes).every(cb => cb.checked);
          }
          updateDropdownText();
        });
      });

      function updateDropdownText() {
        const selectedCategories = Array.from(categoryCheckboxes)
          .filter(cb => cb.checked)
          .map(cb => cb.nextElementSibling.textContent);
        
        if (allCheckbox.checked || selectedCategories.length === categoryCheckboxes.length) {
          categoryDropdown.textContent = 'Todas las categorÃ­as';
        } else if (selectedCategories.length > 0) {
          categoryDropdown.textContent = `${selectedCategories.length} categorÃ­as seleccionadas`;
        } else {
          categoryDropdown.textContent = 'CategorÃ­as';
        }
      }

      resetButton.addEventListener('click', function() {
        allCheckbox.checked = true;
        categoryCheckboxes.forEach(checkbox => {
          checkbox.checked = false;
        });
        updateDropdownText();

        sortBySelect.value = '';

        keywordInput.value = '';

        document.getElementById('filterForm').submit();
      });

      updateDropdownText();
    });
